{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AppointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/INDRA-RETO-RIMAC-DESA-appointment",
        "RetentionInDays": 30
      }
    },
    "AppointmentUnderscorepeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/INDRA-RETO-RIMAC-DESA-appointment_pe",
        "RetentionInDays": 30
      }
    },
    "AppointmentUnderscoreclLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/INDRA-RETO-RIMAC-DESA-appointment_cl",
        "RetentionInDays": 30
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "INDRA-RETO-RIMAC",
                  "DESA",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/INDRA-RETO-RIMAC-DESA*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/INDRA-RETO-RIMAC-DESA*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:region:us-east-2:sqsChangeState",
                    "arn:aws:sqs:region:us-east-2:sqsSchedulePe",
                    "arn:aws:sqs:region:us-east-2:sqsScheduleCl"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "INDRA-RETO-RIMAC",
              "DESA",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AppointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/INDRA-RETO-RIMAC/DESA/1742486807130-2025-03-20T16:06:47.130Z/appointment.zip"
        },
        "Handler": "src/appointment/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "INDRA-RETO-RIMAC-DESA-appointment",
        "MemorySize": 512,
        "Timeout": 300,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "SNS_SCHEDULE_ARN_PE": "",
            "SNS_SCHEDULE_ARN_CL": "",
            "SQS_SCHEDULE_PE": "sqsSchedulePe",
            "SQS_SCHEDULE_CL": "sqsScheduleCl",
            "DDB_SCHEDULES": "schedules",
            "RDS_MYSQL_CONECTION": "{ host: , user: , password: 123 }"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentLogGroup"
      ]
    },
    "AppointmentUnderscorepeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/INDRA-RETO-RIMAC/DESA/1742486807130-2025-03-20T16:06:47.130Z/appointment_pe.zip"
        },
        "Handler": "src/appointment/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "INDRA-RETO-RIMAC-DESA-appointment_pe",
        "MemorySize": 512,
        "Timeout": 300,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "SNS_SCHEDULE_ARN_PE": "",
            "SNS_SCHEDULE_ARN_CL": "",
            "SQS_SCHEDULE_PE": "sqsSchedulePe",
            "SQS_SCHEDULE_CL": "sqsScheduleCl",
            "DDB_SCHEDULES": "schedules",
            "RDS_MYSQL_CONECTION": "{ host: , user: , password: 123 }"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentUnderscorepeLogGroup"
      ]
    },
    "AppointmentUnderscoreclLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/INDRA-RETO-RIMAC/DESA/1742486807130-2025-03-20T16:06:47.130Z/appointment_cl.zip"
        },
        "Handler": "src/appointment/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "INDRA-RETO-RIMAC-DESA-appointment_cl",
        "MemorySize": 512,
        "Timeout": 300,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "SNS_SCHEDULE_ARN_PE": "",
            "SNS_SCHEDULE_ARN_CL": "",
            "SQS_SCHEDULE_PE": "sqsSchedulePe",
            "SQS_SCHEDULE_CL": "sqsScheduleCl",
            "DDB_SCHEDULES": "schedules",
            "RDS_MYSQL_CONECTION": "{ host: , user: , password: 123 }"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentUnderscoreclLogGroup"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "DESA-INDRA-RETO-RIMAC",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceV1": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "V1",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceV1Appointment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceV1"
        },
        "PathPart": "appointment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodV1AppointmentPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceV1Appointment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "400",
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "401",
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "403",
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "404",
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "422",
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "500",
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "502",
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": "504",
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "200"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "400"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "401"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "403"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "404"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "422"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "500"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "502"
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": "504"
          }
        ]
      },
      "DependsOn": [
        "AppointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1742486322332": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "DESA"
      },
      "DependsOn": [
        "ApiGatewayMethodV1AppointmentPost"
      ]
    },
    "AppointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AppointmentEventSourceMappingSQSSqsChangeState": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 60,
        "EventSourceArn": "arn:aws:sqs:region:us-east-2:sqsChangeState",
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentUnderscorepeEventSourceMappingSQSSqsSchedulePe": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 60,
        "EventSourceArn": "arn:aws:sqs:region:us-east-2:sqsSchedulePe",
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentUnderscorepeLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentUnderscoreclEventSourceMappingSQSSqsScheduleCl": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 60,
        "EventSourceArn": "arn:aws:sqs:region:us-east-2:sqsScheduleCl",
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentUnderscoreclLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "topicPe": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "topicPe",
        "ContentBasedDeduplication": false,
        "FifoTopic": true
      }
    },
    "topicCL": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "topicCL"
      }
    },
    "sqsChangeState": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "sqsChangeState",
        "FifoQueue": true
      }
    },
    "sqsSchedulePe": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "sqsSchedulePe",
        "FifoQueue": true
      }
    },
    "sqsScheduleCl": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "sqsScheduleCl",
        "FifoQueue": true
      }
    },
    "SnsSubscriptionPe": {
      "Type": "AWS::SNS::Subscrition",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": "sqsSchedulePe.Arn"
        }
      }
    },
    "SnsSubscriptionCl": {
      "Type": "AWS::SNS::Subscrition",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": "sqsSchedulecl.Arn"
        }
      }
    },
    "EventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "EventRule",
        "EventPattern": {
          "account": [
            {
              "Fn::Sub": "${AWS::AccountId}"
            }
          ],
          "source": [
            "demo.sqs"
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "sqsChangeState",
                "Arn"
              ]
            },
            "Id": "SQSqueue"
          }
        ]
      }
    },
    "EventBridgeToToSqsPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "sqsChangeState",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "MySqsQueue"
          }
        ]
      }
    },
    "appointment": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "appointment",
        "AttributeDefinitions": [
          {
            "AttributeName": "insuredId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "scheduleId",
            "AttributeType": "N"
          },
          {
            "AttributeName": "countryISO",
            "AttributeType": "S"
          },
          {
            "AttributeName": "state",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "insuredId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "schedule": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "appointment",
        "AttributeDefinitions": [
          {
            "AttributeName": "scheduleId",
            "AttributeType": "N"
          },
          {
            "AttributeName": "centerId",
            "AttributeType": "N"
          },
          {
            "AttributeName": "specialtyId",
            "AttributeType": "N"
          },
          {
            "AttributeName": "medicId",
            "AttributeType": "N"
          },
          {
            "AttributeName": "date",
            "AttributeType": "s"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "scheduleId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-INDRA-RETO-RIMAC-DESA-ServerlessDeploymentBucketName"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/DESA"
          ]
        ]
      },
      "Export": {
        "Name": "sls-INDRA-RETO-RIMAC-DESA-ServiceEndpoint"
      }
    }
  }
}